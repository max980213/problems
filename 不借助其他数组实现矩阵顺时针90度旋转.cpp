/*

1  2  3  4  5
6  7  8  9  10
11 12 13 14 15
16 17 18 19 20
21 22 23 34 25

二维数组顺时针旋转90度，不允许借助其他数组
1.可以看出行和列的变化，如第5行变成了第1列，但不允许用其他数组，这样不行
2.顺时针旋转90度，可以一圈一圈的看，每一圈，如最外圈，依次进行轮换，然后里面一圈再换
以最外圈为例，1的位置为00,00->04,04->44,44->40,40->00
              4的位置为03,03->34,34->41,41->10,10->03
              马上找到规律，前一个的j是后一个的i，前一个的i和后一个的j加和为n-1

再来看第二圈，8的位置为12,12->23,23->32,32->21,21->12
              规律马上知道：以n=5为例，第1圈执行n-1次，第2圈执行n-3次....（假设最外圈5个元素，只需要变换第一行的前4个元素即可，因为第1个元素变幻时会变到第5个元素的位置，故第5个元素不需要再变换）
              一共需要执行(int)n/2次

*/

//遇到这种题，画画图即可做出来，逻辑思维性不强

#include <stdio.h>

int main()
{
    int n;
    scanf("%d",&n);
    int a[n][n];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }

    int mid=n/2;  //n截矩阵有n/2圈，故应执行n/2次
    int temp; //临时变量
    for(int i=0;i<mid;i++)
    {
        for(int j=i;j<n-i-1;j++)  //一圈连着一圈，依次从00、11、22开始，一次把一圈都搞定，每一行最后一个元素不需要变换，因为第一个元素会变换到该位置
        {
            temp=a[i][j]; //根据上面的规律，马上可写，从第i行，该行元素逐个处理
            //将该行处理的元素设为临时变量，故应找到它的上一个元素
            //由以上规律可知，顺时针旋转，应逆时针处理
            a[i][j]=a[n-j-1][i]; //上一个元素给它
            a[n-j-1][i]=a[n-i-1][n-j-1];
            a[n-i-1][n-j-1]=a[j][n-i-1];
            a[j][n-i-1]=temp;   //虽然乱，但很好做
        }
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d ",a[i][j]);
        }
        printf("\n");
    }
    return 0;
}



