/*
1001 害死人不偿命的(3n+1)猜想 （15 point(s)）
 
卡拉兹(Callatz)猜想：
 
对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……
 
我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？
 
输入格式：
每个测试输入包含 1 个测试用例，即给出正整数 n 的值。
 
输出格式：
输出从 n 计算到 1 需要的步数。
 
输入样例：
3
输出样例：
5
*/

/*
题目描述
卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。
 
 当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、
 5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在
 验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。 
 现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并
 按从大到小的顺序输出它们。

输入描述:
每个测试输入包含1个测试用例，第1行给出一个正整数K(<100)，第2行给出K个互不相同的待验证的正整数n(1<n<=100)的值，数字间用空格隔开。


输出描述:
每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。

输入例子:
6
 3 5 6 7 8 11

输出例子:
7 6
*/
 
#include <stdio.h>
#include <string.h>
#include <queue>
 
using namespace std;
 
const int maxn=100000;
 
int main()
{
    int hash[maxn];
    priority_queue <int> q;
    memset(hash,0,sizeof(hash));
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        int num;
        scanf("%d",&num);
        q.push(num);
        if(hash[num]==1)
            continue;
        else
        {
            while(num>1)
            {
                if(num%2==0)
                {
                    num/=2;
                }
                else
                {
                    num=(num*3+1)/2;
                }
                if(hash[num]==1)
                    break;
                else
                    hash[num]=1;
            }
        }
    }
    int flag=0;
    while(!q.empty())
    {
         
        if(hash[q.top()]!=1)
        {
            if(flag)
            {
                printf(" %d",q.top());
                //q.pop();
            }
            else
            {
                printf("%d",q.top());
                //q.pop();
                flag++;
            }
        }
      //  else
            q.pop();
    }
    return 0;
}
